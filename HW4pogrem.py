# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

# print('Задача №2')
#
# l = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
# lrez = [l[i+1] for i in range(len(l)-1) if l[i+1] > l[i]]
# print(lrez)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

# print('Задача №3')
#
# res20 = [i for i in range(20,240) if i % 20 == 0]
# res21 = [i for i in range(20,240) if i % 21 == 0]
#
# print(res20)
# print(res21)

# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, соответствующих требованию.
# Элементы выведите в порядке их следования в исходном списке. Для выполнения задания обязательно используйте генератор.
#
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
#
# print('Задача №4')
# a = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
# anew = [i for i in a if a.count(i) == 1]
# print(anew)

# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные числа от 100 до 1000
# (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

# print('Задача №5')
#
# from functools import reduce
# a = [i for i in range(100, 1002, 2)]
# print(a)
# print(reduce(lambda x, y: x*y, a))



# 6. Реализовать два небольших скрипта:
#     итератор, генерирующий целые числа, начиная с указанного;
#     итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и cycle() модуля itertools.
#     Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие его завершения. #### Например, в первом задании
#     выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. Вторым пунктом необходимо предусмотреть условие, при котором
#     повторение элементов списка прекратится.
#
# print('Задача №6')
# import itertools
#
# for i in itertools.count(3):
#   print(i)
#   if i == 10:
#     break
#
#
# i = 0
# for el in itertools.cycle("ABC"):
#     print(el)
#     if i > 10:
#         break
#     i += 1

# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить
# только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
#
import math

def fact(n):
    l = [i for i in range(1, n + 1)]
    for el in l:
        yield math.factorial(el)
g = fact(8)
for el in g:
    print(el)